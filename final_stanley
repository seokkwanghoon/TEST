#!/usr/bin/env python3
# -*- coding: utf-8 -*- 16
import numpy as np
from math import cos, sin, pi, sqrt, atan2, hypot, tan
import csv
import os
import rospkg
import math

class EgoState():
    velocity = 0.0
    x = 0.0
    y = 0.0
    heading = 0.0
    ax = 0.0

class Stanley():
    def __init__(self, dt=1/20):
        self.dt = dt
        self.ref_path = []
        # self.ref_path_xy = []
        self.path_num = 0
        self.newt_waypoint = []
        self.cur_waypoint = []
        self.closest_idx = 0
        self.idx = 0
        self.vehicle_length = 4.635
        self.k = 7  # 기본 Stanley 상수
        self.k_min = 7  # 최소 Stanley 상수
        self.k_max = 15  # 최대 Stanley 상수
        self.curvature_threshold = 0.0257  # 곡률에 따른 임계값
        self.ego = EgoState()
        
        self.lane_change_done = False
        self.prev_filename = None
        self.global_path = None
        self.accident1_path = None
        self.accident2_path = None
        self.accident3_path = None
        self.accident4_path = None
        self.construction_path = None

    def get_velocity(self, vel):
        self.velocity = vel

    def cal_HE(self):
        dx = self.next_waypoint[0] - self.cur_waypoint[0]
        dy = self.next_waypoint[1] - self.cur_waypoint[1]
        path_heading = atan2(dy, dx)  # radian
        heading_error = path_heading - self.yaw * pi / 180  # radian
        heading_error = (heading_error + pi) % (2 * pi) - pi
        return heading_error

    def cal_CTE(self):
        dx = self.next_waypoint[0] - self.cur_waypoint[0]
        dy = self.next_waypoint[1] - self.cur_waypoint[1]
        a = dy
        b = -dx
        c = dx * self.cur_waypoint[1] - dy * self.cur_waypoint[0]
        cte = (a * self.x + b * self.y + c) / sqrt(a ** 2 + b ** 2)
        return cte
    
    def set_state(self, ego):
        self.x = ego.x
        self.y = ego.y
        self.yaw = ego.heading
        self.velocity = ego.velocity


    def find_min_idx(self, vehicle_position):
        if self.closest_idx == 0:
            # 알고리즘이 처음 시작되었거나 재시작된 경우, 전체 경로를 검색
            start_idx = 0
            end_idx = len(self.ref_path)
        else:
            # 전방 300개의 포인트만 고려하여 거리 계산
            start_idx = self.closest_idx
            end_idx = min(self.closest_idx + 300, len(self.ref_path))

        # 고려할 경로 포인트들
        path_positions = self.ref_path[start_idx:end_idx, :2]
        distances = np.linalg.norm(path_positions - vehicle_position, axis=1)
        
        # 가장 가까운 인덱스를 찾음
        closest_local_idx = np.argmin(distances)
        best_idx = closest_local_idx + start_idx
        
        # 선택된 인덱스와 차량 간의 거리가 지나치게 멀지 않은지 확인
        if distances[closest_local_idx] > 10.0:  # 10m 이상 멀면 무시
            # 만약 처음 시작 시 경로가 너무 멀다면 closest_idx를 None으로 유지
            if self.closest_idx is None:
                return None
            else:
                return self.closest_idx
        
        # 인덱스를 업데이트
        self.closest_idx = best_idx
        return self.closest_idx


    def acc_flag(self, lead_x_list, lead_y_list, lead_v_list):
        min_distance = float('inf')
        closest_lead_x = None
        closest_lead_y = None
        closest_lead_v = None
        
        # 현재 인덱스 기준 전방 200개의 포인트를 가져옴
        if self.closest_idx is not None:
            start_idx = self.closest_idx
            end_idx = min(self.closest_idx + 400, len(self.ref_path))
        else:
            start_idx = 0
            end_idx = min(400, len(self.ref_path))
        
        path_positions = self.ref_path[start_idx:end_idx, :2]
        
        for lead_x, lead_y, lead_v in zip(lead_x_list, lead_y_list, lead_v_list):
            # 리드 차량과 ego 차량 간의 거리 계산
            x = self.x - lead_x
            y = self.y - lead_y
            lead_distance = math.sqrt(x**2 + y**2)
            
            # 리드 차량의 위치
            lead_position = np.array([lead_x, lead_y])
            
            # 경로 상의 포인트들과 리드 차량의 위치 차이 계산
            position_differences = np.linalg.norm(path_positions - lead_position, axis=1)
            
            # 경로 상에 위치해 있는지 판단 (임계값을 통해 가까운지 확인)
            is_on_path = np.any(position_differences < 1.0)  # 1m 이내에 있는지 확인
            
            # 경로 상에 있고, 더 가까운 리드 차량을 선택
            if lead_distance < min_distance and is_on_path:
                min_distance = lead_distance
                closest_lead_x = lead_x
                closest_lead_y = lead_y
                closest_lead_v = lead_v
        
        # 최종적으로 가장 가까운 리드 차량이 경로에 있으면 플래그 설정
        if closest_lead_x is not None and min_distance <= 50:
            flag = 1
        else:
            flag = 0
            

        print(f'ACC_flag : {flag}, front_distance : {min_distance}')
        
        return flag , min_distance

    def select_path(self, filename):
        if filename == 'smoothing_path.csv':
            self.ref_path = self.global_path
        elif filename == 'accident1.csv':
            self.ref_path = self.accident1_path
        elif filename == 'accident2.csv':
            self.ref_path = self.accident2_path
        elif filename == 'accident3.csv':
            self.ref_path = self.accident3_path
        elif filename == 'accident4.csv':
            self.ref_path = self.accident4_path
        elif filename == 'construction.csv':
            self.ref_path = self.construction_path
        else:
            raise ValueError(f"Unknown filename: {filename}")

        if self.ref_path is None:
            raise ValueError(f"Reference path for {filename} is not loaded properly.")

    def set_ref_path(self, filename):
        self.select_path(filename)
        print(filename)
        if filename == 'smoothing_path.csv':
            self.lane_change_done = False
        else:
            if self.idx >= len(self.ref_path):
                self.lane_change_done = True
            else:
                self.lane_change_done = False
        
        return self.lane_change_done

    def load_csv_to_array(self, filename):
        rospack = rospkg.RosPack()
        filepath = os.path.join(rospack.get_path('carla_ros'), f'path/{filename}')
        with open(filepath, newline='') as csvfile:
            path_reader = csv.reader(csvfile, delimiter=',', quotechar='|')
            return np.array([list(map(float, row)) for row in path_reader])
     
    def load_all_paths(self):
        self.global_path = self.load_csv_to_array('smoothing_path.csv')
        self.accident1_path = self.load_csv_to_array('accident1.csv')
        self.accident2_path = self.load_csv_to_array('accident2.csv')
        self.accident3_path = self.load_csv_to_array('accident3.csv')
        self.accident4_path = self.load_csv_to_array('accident4.csv')
        self.construction_path = self.load_csv_to_array('construction.csv')

    def calculate_curvature(self):
        step = 5
        if self.ref_path is None or self.idx < step or self.idx >= len(self.ref_path) - step:
            return 0.0

        prev_point = self.ref_path[self.idx - step]
        current_point = self.ref_path[self.idx]
        next_point = self.ref_path[self.idx + step]

        a = np.linalg.norm(current_point - prev_point)
        b = np.linalg.norm(next_point - current_point)
        c = np.linalg.norm(next_point - prev_point)

        if a == 0 or b == 0 or c == 0:
            return 0.0

        s = (a + b + c) / 2
        area = sqrt(max(0, s * (s - a) * (s - b) * (s - c)))

        if area == 0:
            return 0.0

        curvature = (4 * area) / (a * b * c)
        return curvature
    
    def adjust_k_based_on_curvature(self, curvature):
        if curvature > self.curvature_threshold:
            self.k = self.k_max
        else:
            self.k = self.k_min + (self.k_max - self.k_min) * curvature / self.curvature_threshold
        self.k = max(self.k_min, min(self.k, self.k_max))

    def main(self, velocity):
        self.velocity = velocity

        self.idx = self.find_min_idx([self.x, self.y])
        if self.idx is None or self.idx >= len(self.ref_path):
            return 0, self.idx

        if self.idx < len(self.ref_path) - 1:
            self.cur_waypoint = self.ref_path[self.idx, :]
            self.next_waypoint = self.ref_path[self.idx + 1, :]
        else:
            self.cur_waypoint = self.ref_path[-2, :]
            self.next_waypoint = self.ref_path[-1, :]

        heading_error = self.cal_HE()  # radian
        cross_track_error = self.cal_CTE()  # distance

        curvature = self.calculate_curvature()
        self.adjust_k_based_on_curvature(curvature)

        steering = -heading_error - atan2(self.k * cross_track_error, max(10, self.velocity))

        max_steering_angle_deg = 70
        steering = steering * 180 / pi
        steering = max(min(steering, max_steering_angle_deg), -max_steering_angle_deg)
        steering = steering / max_steering_angle_deg

        return steering, self.idx